import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.jayway.jsonpath.JsonPath;

import java.io.*;
import java.util.*;
import java.time.LocalDate;

public class JsonRuleEngine {
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private ObjectNode dataNode;

    public JsonRuleEngine(ObjectNode dataNode) {
        this.dataNode = dataNode;
    }

    public ObjectNode transformJson(JsonNode definitionNode) {
        ObjectNode sessionNode = JsonNodeFactory.instance.objectNode();

        for (JsonNode registeredAttribute : definitionNode.path("registeredAttributes")) {
            String namespace = registeredAttribute.path("namespace").asText();
            ObjectNode namespaceNode = JsonNodeFactory.instance.objectNode();

            // Process attributes
            for (JsonNode attribute : registeredAttribute.path("attributeList")) {
                String attributeName = attribute.path("attributeName").asText();
                String jsonPath = attribute.path("jsonPath").asText();

                if (jsonPath == null || jsonPath.isEmpty()) continue;

                try {
                    Object extractedValue = JsonPath.read(this.dataNode.toString(), jsonPath);
                    if (extractedValue != null) {
                        namespaceNode.putPOJO(attributeName, extractedValue);
                    }
                } catch (Exception e) {
                    System.err.println("[ERROR] Failed to extract data for " + attributeName + " using path " + jsonPath);
                }
            }

            // Process property groups
            for (JsonNode propertyGroup : registeredAttribute.path("propertygroups")) {
                String groupName = propertyGroup.path("name").asText();
                String jsonPath = propertyGroup.path("jsonPath").asText();

                if (jsonPath == null || jsonPath.isEmpty()) continue;

                try {
                    Object extractedValue = JsonPath.read(this.dataNode.toString(), jsonPath);
                    if (extractedValue instanceof List) {
                        ArrayNode arrayNode = objectMapper.valueToTree(extractedValue);
                        namespaceNode.set(groupName, arrayNode);
                    }
                } catch (Exception e) {
                    System.err.println("[ERROR] Failed to extract data for group " + groupName + " using path " + jsonPath);
                }
            }

            if (!namespaceNode.isEmpty()) {
                sessionNode.set(namespace, namespaceNode);
            }
        }

        ObjectNode finalNode = JsonNodeFactory.instance.objectNode();
        finalNode.set("session", sessionNode);
        return finalNode;
    }

    public void mergeTransformedData(ObjectNode transformedData) {
        this.dataNode.setAll(transformedData);
    }

    public void applyGlobalFilter(JsonNode filterNode) {
        String fieldName = filterNode.path("field").path("name").asText();
        String comparison = filterNode.path("comp").asText();
        String filterValue = filterNode.path("value").asText();

        Set<String> excludeList = new HashSet<>();
        if (filterNode.has("exclude")) {
            for (JsonNode node : filterNode.path("exclude")) {
                excludeList.add(node.asText());
            }
        }
        applyFilterToNode(this.dataNode, fieldName, comparison, filterValue, excludeList, "");
    }

    private void applyFilterToNode(JsonNode currentNode, String fieldName, String comparison, String filterValue, Set<String> excludeList, String currentPath) {
        if (currentNode.isObject()) {
            Iterator<String> fieldNames = currentNode.fieldNames();

            while (fieldNames.hasNext()) {
                String key = fieldNames.next();
                JsonNode childNode = currentNode.get(key);
                String newPath = currentPath.isEmpty() ? key : currentPath + "." + key;

                if (excludeList.contains(newPath)) {
                    continue;
                }

                if (childNode.isArray()) {
                    filterArray((ArrayNode) childNode, fieldName, comparison, filterValue);
                } else if (childNode.isObject()) {
                    applyFilterToNode(childNode, fieldName, comparison, filterValue, excludeList, newPath);
                }
            }
        } else if (currentNode.isArray()) {
            filterArray((ArrayNode) currentNode, fieldName, comparison, filterValue);
        }
    }

    private void filterArray(ArrayNode arrayNode, String fieldName, String comparison, String filterValue) {
        for (int i = 0; i < arrayNode.size(); i++) {
            JsonNode element = arrayNode.get(i);

            if (element.isObject() && element.has(fieldName)) {
                JsonNode valueNode = element.get(fieldName);

                if (valueNode != null && valueNode.asText().equals(filterValue)) {
                    arrayNode.remove(i);
                    i--;
                }
            }
        }
    }

    public static void main(String[] args) {
        try {
            ObjectNode dataNode = (ObjectNode) objectMapper.readTree(new File("data.json"));
            JsonNode definitionNode = objectMapper.readTree(new File("definition2.json"));
            JsonNode filterNode = objectMapper.readTree(new File("filter.json"));

            JsonRuleEngine engine = new JsonRuleEngine(dataNode);

            // Perform Transformation
            ObjectNode transformedData = engine.transformJson(definitionNode);
            System.out.println("\n[INFO] Transformed Data:\n" + objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(transformedData));

            // Merge Transformed Data
            engine.mergeTransformedData(transformedData);

            // Apply Global Filter
            engine.applyGlobalFilter(filterNode);
            System.out.println("\n[INFO] Data After Applying Filter:\n" + objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(dataNode));

        } catch (IOException e) {
            System.err.println("[ERROR] An error occurred during processing: " + e.getMessage());
        }
    }
}



{
  "dataSourceName": "session",
  "rootQuery": "",
  "registeredAttributes": [
    {
      "namespace": "portsum",
      "propertygroups": [],
      "attributeList": [
        {
          "attributeName": "acctNew",
          "dataType": "Boolean",
          "jsonPath": "$.session.acctNew"
        },
        {
          "attributeName": "regTypeDesc",
          "dataType": "String",
          "jsonPath": "$.session.regTypeDesc"
        }
      ]
    },
    {
      "namespace": "commonIdentifiers",
      "propertygroups": [
        {
          "name": "params",
          "jsonPath": "$.params[*]"
        }
      ],
      "attributeList": [
        {
          "attributeName": "paramType",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramType"
        },
        {
          "attributeName": "paramValue",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramValue"
        }
      ]
    }
  ]
}



{
  "dataSourceName": "session",
  "rootQuery": "",
  "registeredAttributes": [
    {
      "namespace": "portsum",
      "propertygroups": [],
      "attributeList": [
        {
          "attributeName": "acctNew",
          "dataType": "Boolean",
          "jsonPath": "$.session.acctNew"
        },
        {
          "attributeName": "regTypeDesc",
          "dataType": "String",
          "jsonPath": "$.session.regTypeDesc"
        }
      ]
    },
    {
      "namespace": "commonIdentifiers",
      "propertygroups": [
        {
          "name": "params",
          "jsonPath": "$.params[*]"
        }
      ],
      "attributeList": [
        {
          "attributeName": "paramType",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramType"
        },
        {
          "attributeName": "paramValue",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramValue"
        }
      ]
    }
  ]
}



{
  "dataSourceName": "session",
  "rootQuery": "",
  "registeredAttributes": [
    {
      "namespace": "portsum",
      "propertygroups": [],
      "attributeList": [
        {
          "attributeName": "acctNew",
          "dataType": "Boolean",
          "jsonPath": "$.session.acctNew"
        },
        {
          "attributeName": "regTypeDesc",
          "dataType": "String",
          "jsonPath": "$.session.regTypeDesc"
        }
      ]
    },
    {
      "namespace": "commonIdentifiers",
      "propertygroups": [
        {
          "name": "params",
          "jsonPath": "$.params[*]"
        }
      ],
      "attributeList": [
        {
          "attributeName": "paramType",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramType"
        },
        {
          "attributeName": "paramValue",
          "dataType": "String",
          "propertygroup": "parameters",
          "jsonPath": "$.paramValue"
        }
      ]
    }
  ]
}
